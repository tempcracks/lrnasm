> ../裂纹#978:
В ассемблере селекторы играют ключевую роль в архитектуре x86/x86-64 при работе с защищённым режимом (Protected Mode) и глобальной таблицей дескрипторов (GDT). Они используются для адресации сегментов памяти и управления правами доступа. Рассмотрим их устройство, типы и применение.

---

## 1. Что такое селектор?
Селектор — это 16-битное значение, которое указывает на дескриптор в GDT (Global Descriptor Table) или LDT (Local Descriptor Table). Дескриптор содержит информацию о сегменте памяти: его базовый адрес, лимит (размер) и атрибуты доступа.

### Структура селектора (16 бит):
| Бит  | Назначение                                                                 |
|------|---------------------------------------------------------------------------|
| 0-1  | RPL (Requested Privilege Level) — уровень привилегий (0 = ядро, 3 = пользователь). |
| 2    | TI (Table Indicator): 0 = GDT, 1 = LDT.                          |
| 3-15 | Индекс дескриптора в таблице (GDT/LDT).                              |

---

## 2. Типы селекторов
### 2.1. Селекторы кода и данных
Используются для адресации сегментов кода (CS), данных (DS, ES, FS, GS, SS).

#### Пример загрузки селектора в сегментный регистр:
mov ax, 0x10      ; Селектор 0x10 (индекс 2 в GDT, RPL=0, TI=0)
mov ds, ax        ; Загружаем в DS
### 2.2. Селекторы задач (TSS)
Указывают на дескриптор Task State Segment (TSS), который хранит состояние процессора при переключении задач.

#### Пример загрузки TSS:
mov ax, 0x28      ; Селектор TSS (индекс 5 в GDT)
ltr ax            ; Загружаем в регистр задачи (Task Register)
### 2.3. Null-селектор
Селектор с индексом 0 в GDT — недействительный. Попытка его использования вызовет исключение (#GP).

---

## 3. Работа с GDT и селекторами
### 3.1. Глобальная таблица дескрипторов (GDT)
GDT содержит дескрипторы сегментов. Каждый дескриптор занимает 8 байт и описывает:
- Базовый адрес сегмента.
- Лимит (размер).
- Атрибуты (тип сегмента, права доступа и т. д.).

#### Пример определения GDT в NASM:
section .data
gdt_start:
    ; Null-дескриптор (обязателен)
    dq 0

    ; Дескриптор кода (селектор 0x08)
    dw 0xFFFF      ; Лимит (0-15)
    dw 0x0000      ; База (0-15)
    db 0x00        ; База (16-23)
    db 0b10011010  ; P=1, DPL=0, S=1, Type=0xA (код, исполняемый, чтение)
    db 0b11001111  ; G=1, D/B=1, L=0, AVL=0, Лимит (16-19)
    db 0x00        ; База (24-31)

    ; Дескриптор данных (селектор 0x10)
    dw 0xFFFF      ; Лимит
    dw 0x0000      ; База
    db 0x00        ; База
    db 0b10010010  ; P=1, DPL=0, S=1, Type=2 (данные, чтение/запись)
    db 0b11001111  ; G=1, D/B=1, Лимит
    db 0x00        ; База

gdt_end:

; Описатель GDT (для lgdt)
gdt_descriptor:
    dw gdt_end - gdt_start - 1  ; Размер GDT
    dd gdt_start                ; Адрес GDT
### 3.2. Загрузка GDT
Перед использованием селекторов нужно загрузить GDT в процессор:

lgdt [gdt_descriptor]  ; Загружаем GDT
### 3.3. Переход в защищённый режим
После загрузки GDT нужно:
1. Активировать защищённый режим (бит PE в CR0).
2. Обновить сегментные регистры.

mov eax, cr0
or eax, 1       ; Устанавливаем бит PE
mov cr0, eax

; Дальний прыжок для обновления CS
jmp 0x08:protected_mode  ; 0x08 — селектор кода

protected_mode:
    ; Обновляем другие сегментные регистры
    mov ax, 0x10  ; Селектор данных
    mov ds, ax
    mov es, ax
    mov fs, ax
    mov gs, ax
    mov ss, ax
---

## 4. Селекторы в реальном и защищённом режиме
### 4.1. Реальный режим (Real Mode)
Селекторы работают как указатели на параграфы (сдвиг влево на 4 бита):
mov ax, 0x07C0  ; Сегментный адрес = 0x07C0 << 4 = 0x7C00
mov ds, ax
### 4.2. Защищённый режим (Protected Mode)
Селекторы ссылаются на дескрипторы в GDT/LDT, и их интерпретация зависит от атрибутов дескриптора.

---

> ../裂纹#978:
## 5. Особые случаи
### 5.1. Селекторы в длинном режиме (x86-64)
В 64-битном режиме сегментная адресация почти не используется:
- CS, DS, ES, SS игнорируются (база = 0).
- FS и GS могут иметь ненулевую базу (используются для TLS и системных структур).

#### Пример установки базы для FS:
mov ecx, 0xC0000100  ; MSR для FS.base
mov eax, 0x12345678  ; Младшие 32 бита базы
mov edx, 0x0         ; Старшие 32 бита
wrmsr                ; Записываем в модель-специфичный регистр
### 5.2. Ошибки, связанные с селекторами
- #GP (General Protection Fault): Неверный селектор или нарушение прав доступа.
- #TS (Invalid TSS): Ошибка при переключении задач.

---

## 6. Практическое применение
### 6.1. Переключение между кольцами защиты
Чтобы вызвать код уровня ядра из пользовательского режима, нужно использовать шлюзы вызова (call gates) или системные вызовы (например, через syscall/sysret в x86-64).

### 6.2. Мультизадачность
Селекторы TSS используются для переключения задач в защищённом режиме.

---

## Заключение
Селекторы в ассемблере — это ключевой механизм управления памятью и защитой в архитектуре x86. Они позволяют:
- Контролировать доступ к сегментам памяти через GDT/LDT.
- Реализовывать многозадачность и защиту между кольцами CPU.
- Работать как в реальном, так и в защищённом режиме.

Если вам нужно углубиться в
