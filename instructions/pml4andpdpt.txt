> ../裂纹#978:
### PML4 и PDPT: детальное описание таблиц страниц в x86-64

В 64-битном режиме x86-64 используется 4-уровневая страничная адресация, где PML4 (Page Map Level 4) и PDPT (Page Directory Pointer Table) — ключевые структуры для преобразования виртуальных адресов в физические. Рассмотрим их устройство и работу.

---

## 🔹 1. Иерархия таблиц страниц x86-64
Система страничной адресации состоит из 4 уровней:
1. PML4 (Page Map Level 4) — корневая таблица.
2. PDPT (Page Directory Pointer Table) — указатели на PD.
3. PD (Page Directory) — указатели на PT.
4. PT (Page Table) — финальные записи о страницах.

Виртуальный адрес (64 бита):
┌─────────┬─────────┬─────────┬─────────┬────────────┐
│ PML4 (9)│ PDPT (9)│ PD (9)  │ PT (9)  │ Смещение (12) │
└─────────┴─────────┴─────────┴─────────┴────────────┘
- Каждый уровень использует 9 бит из адреса (512 записей на таблицу).
- Смещение — 12 бит (размер страницы = 4 КБ).

---

## 🔹 2. PML4 (Page Map Level 4)
### 2.1. Структура записи (PML4E)
Каждая запись в PML4 — 64 бита (8 байт):

63      52 51-12      11-0
┌─────────┬────────────┬──────┐
│ Reserved │ PDPT Base  │ Флаги│
└─────────┴────────────┴──────┘
- PDPT Base (биты 12–51): Физический адрес PDPT (выровнен по 4 КБ).
- Флаги (биты 0–11):
  - P (Present): 1 = запись действительна.
  - RW (Read/Write): 1 = запись разрешена.
  - US (User/Supervisor): 1 = доступна из пользовательского режима (Ring 3).
  - NX (No Execute): 1 = запрет исполнения кода на странице.

### 2.2. Пример чтения PML4
mov rax, [pml4_ptr]         ; Указатель на PML4 (загружен в CR3)
mov rbx, [rax + index*8]    ; Чтение записи PML4E
test rbx, 1                 ; Проверка флага P (Present)
jz page_fault_handler       ; Если 0 → страница отсутствует
---

## 🔹 3. PDPT (Page Directory Pointer Table)
### 3.1. Структура записи (PDPTE)
Аналогична PML4E, но указывает на PD:

63      52 51-12      11-0
┌─────────┬────────────┬──────┐
│ Reserved │ PD Base    │ Флаги│
└─────────┴────────────┴──────┘
- PD Base: Физический адрес Page Directory.
- PS (Page Size, бит 7):  
  - Если PS=1 → запись указывает на 1 ГБ страницу (PDPT → 1 ГБ страница, пропуская PD/PT).
  - Если PS=0 → используется следующий уровень (PD).

### 3.2. Пример работы с PDPT
; Получаем PDPTE из PML4E
and rbx, 0xFFFFFFFFFF000  ; Очищаем флаги (получаем адрес PDPT)
mov rcx, [rbx + index*8]  ; Чтение PDPTE

; Проверка на 1 ГБ страницу
test rcx, (1 << 7)        ; Проверка PS
jnz huge_page_1gb         ; Если 1 → 1 ГБ страница
---

## 🔹 4. Формирование физического адреса
### 4.1. Полный алгоритм
1. CR3 содержит физический адрес PML4.
2. Виртуальный адрес разбивается на индексы:
  
   ; Пример для адреса 0xFFFF800012345678
   pml4_index  = (addr >> 39) & 0x1FF  ; 0x100
   pdpt_index  = (addr >> 30) & 0x1FF  ; 0x180
   pd_index    = (addr >> 21) & 0x1FF  ; 0x091
   pt_index    = (addr >> 12) & 0x1FF  ; 0x123
   
3. Процессор проходит по цепочке:
  
   CR3 → PML4[pml4_index] → PDPT[pdpt_index] → PD[pd_index] → PT[pt_index] → Физическая страница.
   
### 4.2. Пример для 4 КБ страницы
; Адрес PML4 из CR3
mov rax, cr3

; Получаем PML4E
mov rbx, [rax + pml4_index*8]

; Получаем PDPTE
mov rcx, [rbx + pdpt_index*8]

; Получаем PDE
mov rdx, [rcx + pd_index*8]

; Получаем PTE
mov rsi, [rdx + pt_index*8]

; Физический адрес = (PTE & 0xFFFFFFFFFF000) | (addr & 0xFFF)
---

## 🔹 5. Huge Pages (Крупные страницы)
### 5.1. 1 ГБ страницы
- Активируются флагом PS=1 в PDPTE.
- Пропускаются уровни PD и PT.
- Смещение в адресе: 30 бит (1 ГБ = 2^30).

### 5.2. 2 МБ страницы
- Активируются флагом PS=1 в PDE.
- Пропускается уровень PT.
- Смещение в адресе: 21 бит (2 МБ = 2^21).

Пример PDPTE для 1 ГБ страницы:
PDPTE = 0x00000001_00000087  ; База=0x100000000, PS=1, RW=1, P=1
---

> ../裂纹#978:
## 🔹 6. Флаги управления
Общие для всех уровней флаги:
| Флаг | Описание                                                                 |
|------|-------------------------------------------------------------------------|
| P  | Страница присутствует в памяти.                                         |
| RW | Разрешена запись (0 = только чтение).                                   |
| US | Доступна из пользовательского режима (Ring 3).                          |
| NX | Запрет исполнения кода (только для x86-64 с включённым NXE в EFER).     |
| A  | Accessed (проставл. CPU при чтении/записи).                             |
| D  | Dirty (проставл. CPU при записи).                                       |

---

## 🔹 7. Практическое применение
### 7.1. Инициализация PML4/PDPT
section .data
align 4096
pml4:
    dq pdp0 + 0x3  ; PDP0, флаги: P=1, RW=1
    times 511 dq 0 ; Остальные записи = 0

pdp0:
    dq pd0 + 0x3   ; PD0, P=1, RW=1
    times 511 dq 0

pd0:
    dq 0x83        ; 2 МБ страница: P=1, RW=1, PS=1
    times 511 dq 0

section .text
global _start
_start:
    mov rax, pml4
    mov cr3, rax   ; Загружаем PML4 в CR3
    mov rax, cr0
    or rax, 0x80000000
    mov cr0, rax   ; Включаем страничную адресацию
    hlt
### 7.2. Обработка Page Fault
При отсутствии страницы (P=0) или нарушении прав (RW/US/NX) процессор генерирует исключение #PF, передавая:
- CR2 — виртуальный адрес.
- Код ошибки в стеке:
  - Бит 0: 1 = страница отсутствует, 0 = нарушение прав.
  - Бит 1: 1 = запись, 0 = чтение.
  - Бит 2: 1 = режим ядра, 0 = пользовательский.

---

## 🔹 8. Оптимизации
- PCID (Process Context ID): Кеширование TLB для разных процессов (CR4.PCIDE=1).
- INVLPG: Инвалидация TLB для конкретного адреса.
- Huge Pages: Уменьшают нагрузку на TLB.

---

## 🔹 Итог
- PML4 — корневая таблица (CR3 указывает на неё).
- PDPT — второй уровень (может указывать на 1 ГБ страницы).
- PD/PT — финальные уровни (2 МБ/4 КБ страницы).
- Флаги (P, RW, US, NX) контролируют доступ.

Важно:  
- Все таблицы должны быть выровнены по 4 КБ.  
- Для работы в x86-64 требуется PAE (CR4.PAE=1) и LME (EFER.LME=1).  
